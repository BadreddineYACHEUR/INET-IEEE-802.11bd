//
// Generated file, do not edit! Created by nedtool 5.6 from /home/yacheur/apps/artery/scenarios/lte-blackice/BlackIceWarning.msg.
//

#ifndef __BLACKICEWARNING_M_H
#define __BLACKICEWARNING_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>/home/yacheur/apps/artery/scenarios/lte-blackice/BlackIceWarning.msg:2</tt> by nedtool.
 * <pre>
 * packet BlackIceReport
 * {
 *     double positionX;
 *     double positionY;
 *     double speed;
 *     simtime_t time;
 * }
 * </pre>
 */
class BlackIceReport : public ::omnetpp::cPacket
{
  protected:
    double positionX;
    double positionY;
    double speed;
    ::omnetpp::simtime_t time;

  private:
    void copy(const BlackIceReport& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BlackIceReport&);

  public:
    BlackIceReport(const char *name=nullptr, short kind=0);
    BlackIceReport(const BlackIceReport& other);
    virtual ~BlackIceReport();
    BlackIceReport& operator=(const BlackIceReport& other);
    virtual BlackIceReport *dup() const override {return new BlackIceReport(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getPositionX() const;
    virtual void setPositionX(double positionX);
    virtual double getPositionY() const;
    virtual void setPositionY(double positionY);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual ::omnetpp::simtime_t getTime() const;
    virtual void setTime(::omnetpp::simtime_t time);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BlackIceReport& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BlackIceReport& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/yacheur/apps/artery/scenarios/lte-blackice/BlackIceWarning.msg:10</tt> by nedtool.
 * <pre>
 * packet BlackIceQuery
 * {
 *     double positionX;
 *     double positionY;
 *     double radius;
 * }
 * </pre>
 */
class BlackIceQuery : public ::omnetpp::cPacket
{
  protected:
    double positionX;
    double positionY;
    double radius;

  private:
    void copy(const BlackIceQuery& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BlackIceQuery&);

  public:
    BlackIceQuery(const char *name=nullptr, short kind=0);
    BlackIceQuery(const BlackIceQuery& other);
    virtual ~BlackIceQuery();
    BlackIceQuery& operator=(const BlackIceQuery& other);
    virtual BlackIceQuery *dup() const override {return new BlackIceQuery(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getPositionX() const;
    virtual void setPositionX(double positionX);
    virtual double getPositionY() const;
    virtual void setPositionY(double positionY);
    virtual double getRadius() const;
    virtual void setRadius(double radius);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BlackIceQuery& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BlackIceQuery& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/yacheur/apps/artery/scenarios/lte-blackice/BlackIceWarning.msg:17</tt> by nedtool.
 * <pre>
 * packet BlackIceResponse
 * {
 *     int warnings;
 * }
 * </pre>
 */
class BlackIceResponse : public ::omnetpp::cPacket
{
  protected:
    int warnings;

  private:
    void copy(const BlackIceResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BlackIceResponse&);

  public:
    BlackIceResponse(const char *name=nullptr, short kind=0);
    BlackIceResponse(const BlackIceResponse& other);
    virtual ~BlackIceResponse();
    BlackIceResponse& operator=(const BlackIceResponse& other);
    virtual BlackIceResponse *dup() const override {return new BlackIceResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getWarnings() const;
    virtual void setWarnings(int warnings);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BlackIceResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BlackIceResponse& obj) {obj.parsimUnpack(b);}


#endif // ifndef __BLACKICEWARNING_M_H

