//
// Generated file, do not edit! Created by nedtool 5.6 from /home/yacheur/apps/artery/scenarios/lte-streaming/StreamingD2D.msg.
//

#ifndef __STREAMINGD2D_M_H
#define __STREAMINGD2D_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>/home/yacheur/apps/artery/scenarios/lte-streaming/StreamingD2D.msg:2</tt> by nedtool.
 * <pre>
 * packet StreamingReport
 * {
 *     double positionX;
 *     double positionY;
 *     double speed;
 *     simtime_t time;
 * }
 * </pre>
 */
class StreamingReport : public ::omnetpp::cPacket
{
  protected:
    double positionX;
    double positionY;
    double speed;
    ::omnetpp::simtime_t time;

  private:
    void copy(const StreamingReport& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StreamingReport&);

  public:
    StreamingReport(const char *name=nullptr, short kind=0);
    StreamingReport(const StreamingReport& other);
    virtual ~StreamingReport();
    StreamingReport& operator=(const StreamingReport& other);
    virtual StreamingReport *dup() const override {return new StreamingReport(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getPositionX() const;
    virtual void setPositionX(double positionX);
    virtual double getPositionY() const;
    virtual void setPositionY(double positionY);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual ::omnetpp::simtime_t getTime() const;
    virtual void setTime(::omnetpp::simtime_t time);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StreamingReport& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StreamingReport& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/yacheur/apps/artery/scenarios/lte-streaming/StreamingD2D.msg:10</tt> by nedtool.
 * <pre>
 * packet StreamingQuery
 * {
 *     double positionX;
 *     double positionY;
 *     double radius;
 * }
 * </pre>
 */
class StreamingQuery : public ::omnetpp::cPacket
{
  protected:
    double positionX;
    double positionY;
    double radius;

  private:
    void copy(const StreamingQuery& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StreamingQuery&);

  public:
    StreamingQuery(const char *name=nullptr, short kind=0);
    StreamingQuery(const StreamingQuery& other);
    virtual ~StreamingQuery();
    StreamingQuery& operator=(const StreamingQuery& other);
    virtual StreamingQuery *dup() const override {return new StreamingQuery(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getPositionX() const;
    virtual void setPositionX(double positionX);
    virtual double getPositionY() const;
    virtual void setPositionY(double positionY);
    virtual double getRadius() const;
    virtual void setRadius(double radius);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StreamingQuery& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StreamingQuery& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/yacheur/apps/artery/scenarios/lte-streaming/StreamingD2D.msg:17</tt> by nedtool.
 * <pre>
 * packet StreamingResponse
 * {
 *     int warnings;
 * }
 * </pre>
 */
class StreamingResponse : public ::omnetpp::cPacket
{
  protected:
    int warnings;

  private:
    void copy(const StreamingResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StreamingResponse&);

  public:
    StreamingResponse(const char *name=nullptr, short kind=0);
    StreamingResponse(const StreamingResponse& other);
    virtual ~StreamingResponse();
    StreamingResponse& operator=(const StreamingResponse& other);
    virtual StreamingResponse *dup() const override {return new StreamingResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getWarnings() const;
    virtual void setWarnings(int warnings);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StreamingResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StreamingResponse& obj) {obj.parsimUnpack(b);}


#endif // ifndef __STREAMINGD2D_M_H

